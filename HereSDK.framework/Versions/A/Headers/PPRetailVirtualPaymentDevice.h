/**
 * PPRetailVirtualPaymentDevice.h
 *
 * DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED AND SHOULD NOT BE CHECKED IN.
 * Generated from: js/paymentDevice/VirtualPaymentDevice.js
 *
 * 
 */

#import "PayPalRetailSDKTypeDefs.h"
#import "PPRetailObject.h"

@class PPRetailSDK;
@class PPRetailError;
@class PPRetailPayPalErrorInfo;
@class PPRetailAccountSummary;
@class PPRetailAccountSummarySection;
@class PPRetailInvoiceAddress;
@class PPRetailInvoiceAttachment;
@class PPRetailInvoiceBillingInfo;
@class PPRetailInvoiceCCInfo;
@class PPRetailCountries;
@class PPRetailCountry;
@class PPRetailInvoiceCustomAmount;
@class PPRetailInvoice;
@class PPRetailInvoiceActions;
@class PPRetailInvoiceListRequest;
@class PPRetailInvoiceListResponse;
@class PPRetailInvoiceMetaData;
@class PPRetailInvoiceTemplatesResponse;
@class PPRetailInvoicingService;
@class PPRetailInvoiceItem;
@class PPRetailInvoiceMerchantInfo;
@class PPRetailInvoiceNotification;
@class PPRetailInvoicePayment;
@class PPRetailInvoicePaymentTerm;
@class PPRetailInvoiceRefund;
@class PPRetailInvoiceSearchRequest;
@class PPRetailInvoiceShippingInfo;
@class PPRetailInvoiceTemplate;
@class PPRetailInvoiceTemplateSettings;
@class PPRetailMerchant;
@class PPRetailTransactionContext;
@class PPRetailSignatureReceiver;
@class PPRetailReceiptOptionsViewContent;
@class PPRetailReceiptEmailEntryViewContent;
@class PPRetailReceiptSMSEntryViewContent;
@class PPRetailReceiptViewContent;
@class PPRetailCard;
@class PPRetailBatteryInfo;
@class PPRetailMagneticCard;
@class PPRetailPaymentDevice;
@class PPRetailEmvDevice;
@class PPRetailSecureEntryOptions;
@class PPRetailNumericEntryOptions;
@class PPRetailManuallyEnteredCard;
@class PPRetailDeviceUpdate;
@class PPRetailDeviceOperationResultHandler;
@class PPRetailVirtualPaymentDevice;
@class PPRetailPayer;
@class PPRetailTransactionRecord;

/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/**
 * A virtual payment device allows you to replace the data transport layer of an existing supported
 * payment device. For example, if you want to connect a PayPal Here terminal to a DIFFERENT physical
 * machine than the customer UI. There are two important concepts to keep in mind. First, the virtual
 * device must be "attached" for the SDK to know about it. This allows you to manipulate the device
 * existence separately from whether or not it is actually connected and in use by the SDK. Second,
 * after attaching, the SDK will usually automatically make a connection attempt to get metadata and such,
 * and depending on various factors, determine whether to hold onto the connection or release it (such as
 * battery level or connection type).
 */
@interface PPRetailVirtualPaymentDevice : PPRetailObject


    - (instancetype _Nullable)initWithDeviceType:(NSString* _Nullable)deviceType deviceId:(NSString* _Nullable)deviceId connectFunction:(PPRetailVirtualPaymentDeviceConnectFunctionHandler _Nullable)connectFunction sendFunction:(PPRetailVirtualPaymentDeviceSendFunctionHandler _Nullable)sendFunction isConnectedFunction:(PPRetailVirtualPaymentDeviceIsConnectedFunctionHandler _Nullable)isConnectedFunction disconnectFunction:(PPRetailVirtualPaymentDeviceDisconnectFunctionHandler _Nullable)disconnectFunction;
    - (instancetype _Nullable)init NS_UNAVAILABLE;
    + (instancetype _Nullable)new NS_UNAVAILABLE;




    /**
     * Let the SDK attempt to use this device
     */
    -(void)attach;

    /**
     * Make this device disappear from the SDK
     */
    -(void)detach;

    /**
     * You must call this method when data has been received from the device
     */
    -(void)received:(NSString* _Nullable)base64Data;

    /**
     * You must call this method when the device has been disconnected either by explicit disconnect
     * or external event.
     */
    -(void)onDisconnected:(NSString* _Nullable)reasonMessage;




@end
