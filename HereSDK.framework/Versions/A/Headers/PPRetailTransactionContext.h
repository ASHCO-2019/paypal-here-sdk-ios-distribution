/**
 * PPRetailTransactionContext.h
 *
 * DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED AND SHOULD NOT BE CHECKED IN.
 * Generated from: js/transaction/TransactionContext.js
 *
 * 
 */

#import "PayPalRetailSDKTypeDefs.h"
#import "PPRetailObject.h"

@class PPRetailSDK;
@class PPRetailError;
@class PPRetailPayPalErrorInfo;
@class PPRetailAccountSummary;
@class PPRetailAccountSummarySection;
@class PPRetailInvoiceAddress;
@class PPRetailInvoiceAttachment;
@class PPRetailInvoiceBillingInfo;
@class PPRetailInvoiceCCInfo;
@class PPRetailCountries;
@class PPRetailCountry;
@class PPRetailInvoiceCustomAmount;
@class PPRetailInvoice;
@class PPRetailInvoiceActions;
@class PPRetailInvoiceListRequest;
@class PPRetailInvoiceListResponse;
@class PPRetailInvoiceMetaData;
@class PPRetailInvoiceTemplatesResponse;
@class PPRetailInvoicingService;
@class PPRetailInvoiceItem;
@class PPRetailInvoiceMerchantInfo;
@class PPRetailInvoiceNotification;
@class PPRetailInvoicePayment;
@class PPRetailInvoicePaymentTerm;
@class PPRetailInvoiceRefund;
@class PPRetailInvoiceSearchRequest;
@class PPRetailInvoiceShippingInfo;
@class PPRetailInvoiceTemplate;
@class PPRetailInvoiceTemplateSettings;
@class PPRetailMerchant;
@class PPRetailTransactionContext;
@class PPRetailSignatureReceiver;
@class PPRetailReceiptOptionsViewContent;
@class PPRetailReceiptEmailEntryViewContent;
@class PPRetailReceiptSMSEntryViewContent;
@class PPRetailReceiptViewContent;
@class PPRetailCard;
@class PPRetailBatteryInfo;
@class PPRetailMagneticCard;
@class PPRetailPaymentDevice;
@class PPRetailEmvDevice;
@class PPRetailSecureEntryOptions;
@class PPRetailNumericEntryOptions;
@class PPRetailManuallyEnteredCard;
@class PPRetailDeviceUpdate;
@class PPRetailDeviceOperationResultHandler;
@class PPRetailVirtualPaymentDevice;
@class PPRetailPayer;
@class PPRetailTransactionRecord;

/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/**
 * The TransactionContext class is returned by RetailSDK.createTransaction and allows
 * you to control many aspects of the payment or refund flow and observe events that
 * occur during the flows. Simply creating a TransactionContext will not kick off any behaviors,
 * so that you have a chance to configure the transaction context as you wish (choose payment
 * devices, specify transaction options, etc). When you're ready to proceed with the payment flow,
 * call begin()
 */
@interface PPRetailTransactionContext : PPRetailObject

    /**
    * The invoice being processed for this transaction
    */
    @property (nonatomic,strong,nullable) PPRetailInvoice* invoice;
    /**
    * The type of transaction being attempted
 * (defaults to Sale if the invoice is not already paid, Refund if it is already paid)
    */
    @property (nonatomic,assign) PPRetailTransactionContextType type;
    /**
    * Given the current state of the invoice and transaction,
 * is a signature required to secure payment? @readonly
    */
    @property (nonatomic,assign,readonly) BOOL isSignatureRequired;
    /**
    * card that was presented by the consumer for this transaction @readonly
    */
    @property (nonatomic,strong,nullable,readonly) PPRetailCard* card;
    /**
    * If you set the paymentDevices property, this context
 * will only use the devices you specify to accept
 * payment. This can be useful for cases where a single terminal is managing multiple payment
 * devices with transactions proceeding in parallel. (This feature is still experimental for
 * certain payment factors, as any UI will still be single-instance.)
    */
    @property (nonatomic,strong,nullable) NSArray* paymentDevices;
    /**
    * While building your invoice, the running total
 * will be displayed on PaymentDevices capable of displaying messages. If you set
 * totalDisplayFooter, that will be displayed (centered) after the total
 * amount. Note that once the payment flow starts, EMV certification requires that the display
 * just show the total and iconography corresponding to expected payment types. Your message
 * will not be on that screen.
    */
    @property (nonatomic,strong,nullable) NSString* totalDisplayFooter;
    /**
    * If you would like to display additional receipt options
 * such as print, etc., you can provide them here. These options would be presented on the receipt screen below
 * the Email and Text options.
    */
    @property (nonatomic,strong,nullable) NSArray* additionalReceiptOptions;

    - (instancetype _Nullable)initWithInvoice:(PPRetailInvoice* _Nullable)invoice merchant:(PPRetailMerchant* _Nullable)merchant;
    - (instancetype _Nullable)init NS_UNAVAILABLE;
    + (instancetype _Nullable)new NS_UNAVAILABLE;




    /**
     * Begin the flow (activate payment devices, listen for relevant events from devices)
     */
    -(PPRetailTransactionContext* _Nullable)begin:(BOOL)showPrompt;

    /**
     * Begin the flow to issue a refund on the current invoice.
     */
    -(PPRetailTransactionContext* _Nullable)beginRefund:(BOOL)cardPresent amount:(NSDecimalNumber* _Nullable)amount;

    /**
     * Is the transaction a type of refund?
     */
    -(BOOL)isRefund;

    /**
     * End a transaction attempt abandoning any progress. The completed event
     * will NOT be fired for this TransactionContext given that you have explicitly
     * cancelled the transaction.
     */
    -(void)cancel;

    /**
     * Continue processing a transaction - the behavior of which depends on the presented card.
     * If it's a magnetic card or an NFC tap, payment will be attempted and money will move
     * (if successful). If it's an EMV card insertion, we will start the EMV flow which includes
     * a few calls to the server, potentially asking the user to enter a PIN, etc.
     */
    -(void)continueWithCard:(PPRetailCard* _Nullable)card;

    /**
     * If you acquire signatures yourself, for example from a Topaz Pen Pad or with an external
     * camera, set this property to a handler that will be invoked when signature should be
     * collected. Once you've collected the signature, call the supplied signatureReceiver
     * with a base64 encoded JPG of the signature. Try to keep it under 100k.
     */
    -(void)setSignatureCollector:(PPRetailTransactionContextSignatureCollectorHandler _Nullable)collector;




    /**
     * Add a listener for the completed event
     * @returns PPRetailCompletedSignal an object that can be used to remove the listener when
     * you're done with it.
     */
    -(PPRetailCompletedSignal _Nullable)addCompletedListener:(PPRetailCompletedEvent _Nullable)listener;

    /**
     * Remove a listener for the completed event given the signal object that was returned from addCompletedListener
     */
    -(void)removeCompletedListener:(PPRetailCompletedSignal _Nullable)listenerToken;


    /**
     * Add a listener for the cardPresented event
     * @returns PPRetailCardPresentedSignal an object that can be used to remove the listener when
     * you're done with it.
     */
    -(PPRetailCardPresentedSignal _Nullable)addCardPresentedListener:(PPRetailCardPresentedEvent _Nullable)listener;

    /**
     * Remove a listener for the cardPresented event given the signal object that was returned from addCardPresentedListener
     */
    -(void)removeCardPresentedListener:(PPRetailCardPresentedSignal _Nullable)listenerToken;


    /**
     * Add a listener for the pinEntry event
     * @returns PPRetailPinEntrySignal an object that can be used to remove the listener when
     * you're done with it.
     */
    -(PPRetailPinEntrySignal _Nullable)addPinEntryListener:(PPRetailPinEntryEvent _Nullable)listener;

    /**
     * Remove a listener for the pinEntry event given the signal object that was returned from addPinEntryListener
     */
    -(void)removePinEntryListener:(PPRetailPinEntrySignal _Nullable)listenerToken;


    /**
     * Add a listener for the willPresentSignature event
     * @returns PPRetailWillPresentSignatureSignal an object that can be used to remove the listener when
     * you're done with it.
     */
    -(PPRetailWillPresentSignatureSignal _Nullable)addWillPresentSignatureListener:(PPRetailWillPresentSignatureEvent _Nullable)listener;

    /**
     * Remove a listener for the willPresentSignature event given the signal object that was returned from addWillPresentSignatureListener
     */
    -(void)removeWillPresentSignatureListener:(PPRetailWillPresentSignatureSignal _Nullable)listenerToken;


    /**
     * Add a listener for the didCompleteSignature event
     * @returns PPRetailDidCompleteSignatureSignal an object that can be used to remove the listener when
     * you're done with it.
     */
    -(PPRetailDidCompleteSignatureSignal _Nullable)addDidCompleteSignatureListener:(PPRetailDidCompleteSignatureEvent _Nullable)listener;

    /**
     * Remove a listener for the didCompleteSignature event given the signal object that was returned from addDidCompleteSignatureListener
     */
    -(void)removeDidCompleteSignatureListener:(PPRetailDidCompleteSignatureSignal _Nullable)listenerToken;


    /**
     * Add a listener for the additionalReceiptOptionSelected event
     * @returns PPRetailAdditionalReceiptOptionSelectedSignal an object that can be used to remove the listener when
     * you're done with it.
     */
    -(PPRetailAdditionalReceiptOptionSelectedSignal _Nullable)addAdditionalReceiptOptionSelectedListener:(PPRetailAdditionalReceiptOptionSelectedEvent _Nullable)listener;

    /**
     * Remove a listener for the additionalReceiptOptionSelected event given the signal object that was returned from addAdditionalReceiptOptionSelectedListener
     */
    -(void)removeAdditionalReceiptOptionSelectedListener:(PPRetailAdditionalReceiptOptionSelectedSignal _Nullable)listenerToken;


@end
