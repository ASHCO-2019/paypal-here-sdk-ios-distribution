<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/PPHLocalManager.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/PPHLocalManager</TokenIdentifier>
			<Abstract type="html">PPHLocalManager provides a &quot;jumping off point&quot; for manipulating merchant locations and watching open and closed checkins</Abstract>
			<DeclaredIn>PPHLocalManager.h</DeclaredIn>
            
			
			<NodeRef refid="30"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHLocalManager/watcherForLocationId:withDelegate:</TokenIdentifier>
			<Abstract type="html">Get an object that will notify delegate of new and removed checkins from customers</Abstract>
			<DeclaredIn>PPHLocalManager.h</DeclaredIn>
			
			<Declaration>- (PPHLocationWatcher *)watcherForLocationId:(id)locationId withDelegate:(id)delegate</Declaration>
			<Parameters>
				<Parameter>
					<Name>locationId</Name>
					<Abstract type="html">the locationId of the merchant location as returned by the beginGetLocations method (or stored in
some preference based on a previous return of beginGetLocations)</Abstract>
				</Parameter><Parameter>
					<Name>delegate</Name>
					<Abstract type="html">the object that will be notified when checkins are opened or closed. Note that at the moment you have
to call update: manually</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/watcherForLocationId:withDelegate:</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHLocalManager/beginGetLocations:</TokenIdentifier>
			<Abstract type="html">Kick off a request to get all merchant locations for the currently active merchant</Abstract>
			<DeclaredIn>PPHLocalManager.h</DeclaredIn>
			
			<Declaration>- (void)beginGetLocations:(id)handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>handler</Name>
					<Abstract type="html">called on completion of the request</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/beginGetLocations:</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHLocalManager/setBeaconLocation:</TokenIdentifier>
			<Abstract type="html">Get or set the location for which a soft beacon should be advertised by this device, if the device supports BLE.
Use location watcher to get status of enablement</Abstract>
			<DeclaredIn>PPHLocalManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) PPHLocation *beaconLocation</Declaration>
			
			
			<Anchor>//api/name/beaconLocation</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHLocalManager/beaconLocation</TokenIdentifier>
			<Abstract type="html">Get or set the location for which a soft beacon should be advertised by this device, if the device supports BLE.
Use location watcher to get status of enablement</Abstract>
			<DeclaredIn>PPHLocalManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) PPHLocation *beaconLocation</Declaration>
			
			
			<Anchor>//api/name/beaconLocation</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPHLocalManager/beaconLocation</TokenIdentifier>
			<Abstract type="html">Get or set the location for which a soft beacon should be advertised by this device, if the device supports BLE.
Use location watcher to get status of enablement</Abstract>
			<DeclaredIn>PPHLocalManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) PPHLocation *beaconLocation</Declaration>
			
			
			<Anchor>//api/name/beaconLocation</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHLocalManager/isBeaconActive</TokenIdentifier>
			<Abstract type="html">Whether the soft beacon is currently broadcasting (requires beaconLocation to be non-nil, but also that it&apos;s working.)
For status updates during the process, see PPHLocationWatcher.</Abstract>
			<DeclaredIn>PPHLocalManager.h</DeclaredIn>
			
			<Declaration>- (BOOL)isBeaconActive</Declaration>
			
			
			<Anchor>//api/name/isBeaconActive</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHLocalManager/setIsBackgroundBeaconEnabled:</TokenIdentifier>
			<Abstract type="html">Using background beacon services requires specific entitlements for your application. Since we cannot read these entitlements
automatically at runtime, you must tell the SDK if you want background beacon advertisements to be enabled. Defaults to false.
Must be set before setBeaconLocation as it generally only matters when starting CoreBluetooth services.</Abstract>
			<DeclaredIn>PPHLocalManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL isBackgroundBeaconEnabled</Declaration>
			
			
			<Anchor>//api/name/isBackgroundBeaconEnabled</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHLocalManager/isBackgroundBeaconEnabled</TokenIdentifier>
			<Abstract type="html">Using background beacon services requires specific entitlements for your application. Since we cannot read these entitlements
automatically at runtime, you must tell the SDK if you want background beacon advertisements to be enabled. Defaults to false.
Must be set before setBeaconLocation as it generally only matters when starting CoreBluetooth services.</Abstract>
			<DeclaredIn>PPHLocalManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL isBackgroundBeaconEnabled</Declaration>
			
			
			<Anchor>//api/name/isBackgroundBeaconEnabled</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPHLocalManager/isBackgroundBeaconEnabled</TokenIdentifier>
			<Abstract type="html">Using background beacon services requires specific entitlements for your application. Since we cannot read these entitlements
automatically at runtime, you must tell the SDK if you want background beacon advertisements to be enabled. Defaults to false.
Must be set before setBeaconLocation as it generally only matters when starting CoreBluetooth services.</Abstract>
			<DeclaredIn>PPHLocalManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL isBackgroundBeaconEnabled</Declaration>
			
			
			<Anchor>//api/name/isBackgroundBeaconEnabled</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
        
        
	</File>
</Tokens>