<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/PPHInvoiceFormatter.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/PPHInvoiceFormatter</TokenIdentifier>
			<Abstract type="html">PPHInvoiceFormatter is capable of rendering the details of invoices for receipt purposes. Online receipts
are typically hosted by PayPal, but this class is mainly useful for producing printable receipts.</Abstract>
			<DeclaredIn>PPHInvoiceFormatter.h</DeclaredIn>
            
			
			<NodeRef refid="25"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHInvoiceFormatter/init</TokenIdentifier>
			<Abstract type="html">Initialize the invoice formatter with default properties, namely character based with a 40 column width</Abstract>
			<DeclaredIn>PPHInvoiceFormatter.h</DeclaredIn>
			
			<Declaration>- (id)init</Declaration>
			
			
			<Anchor>//api/name/init</Anchor>
            <NodeRef refid="25"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHInvoiceFormatter/formattedStringForInvoice:</TokenIdentifier>
			<Abstract type="html">Format the invoice according to the formatter settings and return a string suitable for printing in
a fixed width font</Abstract>
			<DeclaredIn>PPHInvoiceFormatter.h</DeclaredIn>
			
			<Declaration>- (NSString *)formattedStringForInvoice:(PPHInvoice *)invoice</Declaration>
			<Parameters>
				<Parameter>
					<Name>invoice</Name>
					<Abstract type="html">The invoice receipt to be printed</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/formattedStringForInvoice:</Anchor>
            <NodeRef refid="25"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHInvoiceFormatter/htmlStringForInvoice:</TokenIdentifier>
			<Abstract type="html">Format the invoice according to the formatter settings and return an HTML string suitable for printing.
If you want to customize the look and feel, the output will contain &quot;targetable&quot; CSS classes and structure
to allow a decent amount of customization, and will be XHTML for easy modification.</Abstract>
			<DeclaredIn>PPHInvoiceFormatter.h</DeclaredIn>
			
			<Declaration>- (NSString *)htmlStringForInvoice:(PPHInvoice *)invoice</Declaration>
			<Parameters>
				<Parameter>
					<Name>invoice</Name>
					<Abstract type="html">The invoice receipt to be printed</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/htmlStringForInvoice:</Anchor>
            <NodeRef refid="25"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHInvoiceFormatter/formattedImageForInvoice:withWidth:</TokenIdentifier>
			<Abstract type="html">Format the invoice according to the formatter settings and return an image with the specified width
and height depending on the number of items on the invoice. This is essentially using the htmlStringForInvoice
method and rendering it down to an image for you.</Abstract>
			<DeclaredIn>PPHInvoiceFormatter.h</DeclaredIn>
			
			<Declaration>- (UIImage *)formattedImageForInvoice:(PPHInvoice *)invoice withWidth:(NSInteger)widthInPixels</Declaration>
			<Parameters>
				<Parameter>
					<Name>invoice</Name>
					<Abstract type="html">The invoice receipt to be printed</Abstract>
				</Parameter><Parameter>
					<Name>widthInPixels</Name>
					<Abstract type="html">The width of the returned image - height will be determined based on this</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/formattedImageForInvoice:withWidth:</Anchor>
            <NodeRef refid="25"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHInvoiceFormatter/setColumnWidth:</TokenIdentifier>
			<Abstract type="html">The number of columns used in the receipt (since we use fixed width fonts in all cases)</Abstract>
			<DeclaredIn>PPHInvoiceFormatter.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSInteger columnWidth</Declaration>
			
			
			<Anchor>//api/name/columnWidth</Anchor>
            <NodeRef refid="25"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHInvoiceFormatter/columnWidth</TokenIdentifier>
			<Abstract type="html">The number of columns used in the receipt (since we use fixed width fonts in all cases)</Abstract>
			<DeclaredIn>PPHInvoiceFormatter.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSInteger columnWidth</Declaration>
			
			
			<Anchor>//api/name/columnWidth</Anchor>
            <NodeRef refid="25"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPHInvoiceFormatter/columnWidth</TokenIdentifier>
			<Abstract type="html">The number of columns used in the receipt (since we use fixed width fonts in all cases)</Abstract>
			<DeclaredIn>PPHInvoiceFormatter.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSInteger columnWidth</Declaration>
			
			
			<Anchor>//api/name/columnWidth</Anchor>
            <NodeRef refid="25"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHInvoiceFormatter/setReceiptType:</TokenIdentifier>
			<Abstract type="html">The type of receipt that should be produced by this formatter. You can change this between calls.</Abstract>
			<DeclaredIn>PPHInvoiceFormatter.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) PPHInvoiceReceiptType receiptType</Declaration>
			
			
			<Anchor>//api/name/receiptType</Anchor>
            <NodeRef refid="25"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHInvoiceFormatter/receiptType</TokenIdentifier>
			<Abstract type="html">The type of receipt that should be produced by this formatter. You can change this between calls.</Abstract>
			<DeclaredIn>PPHInvoiceFormatter.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) PPHInvoiceReceiptType receiptType</Declaration>
			
			
			<Anchor>//api/name/receiptType</Anchor>
            <NodeRef refid="25"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPHInvoiceFormatter/receiptType</TokenIdentifier>
			<Abstract type="html">The type of receipt that should be produced by this formatter. You can change this between calls.</Abstract>
			<DeclaredIn>PPHInvoiceFormatter.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) PPHInvoiceReceiptType receiptType</Declaration>
			
			
			<Anchor>//api/name/receiptType</Anchor>
            <NodeRef refid="25"/>
		</Token>
		
        
	</File>
</Tokens>