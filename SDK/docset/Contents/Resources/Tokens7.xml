<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/PPHCardReaderManager.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/PPHCardReaderManager</TokenIdentifier>
			<Abstract type="html">The card reader manager handles all interaction with card and chip&amp;amp;pin hardware devices.
This includes audio readers, dock port readers, and Bluetooth readers.</Abstract>
			<DeclaredIn>PPHCardReaderManager.h</DeclaredIn>
            
			
			<NodeRef refid="7"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHCardReaderManager/beginMonitoring</TokenIdentifier>
			<Abstract type="html">Monitor for all known device types</Abstract>
			<DeclaredIn>PPHCardReaderManager.h</DeclaredIn>
			
			<Declaration>- (PPHReaderError)beginMonitoring</Declaration>
			
			
			<Anchor>//api/name/beginMonitoring</Anchor>
            <NodeRef refid="7"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHCardReaderManager/beginMonitoring:</TokenIdentifier>
			<Abstract type="html">Begin monitoring the device for connection and removal of the specified reader types.</Abstract>
			<DeclaredIn>PPHCardReaderManager.h</DeclaredIn>
			
			<Declaration>- (PPHReaderError)beginMonitoring:(PPHReaderTypeMask)readerTypes</Declaration>
			<Parameters>
				<Parameter>
					<Name>readerTypes</Name>
					<Abstract type="html">the types of readers to watch for</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/beginMonitoring:</Anchor>
            <NodeRef refid="7"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHCardReaderManager/endMonitoring:</TokenIdentifier>
			<Abstract type="html">Stop reacting to events around device connection and removal.</Abstract>
			<DeclaredIn>PPHCardReaderManager.h</DeclaredIn>
			
			<Declaration>- (void)endMonitoring:(BOOL)unregisterForLocalNotifications</Declaration>
			<Parameters>
				<Parameter>
					<Name>unregisterForLocalNotifications</Name>
					<Abstract type="html">if YES, we will call EAAccessoryManager unregisterForLocalNotifications</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/endMonitoring:</Anchor>
            <NodeRef refid="7"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHCardReaderManager/activateReader:</TokenIdentifier>
			<Abstract type="html">Connect or activate the reader given. In the case of the audio readers, this may activate the battery,
in other cases this will connect to the bluetooth or feature port accessory or do similar activities.</Abstract>
			<DeclaredIn>PPHCardReaderManager.h</DeclaredIn>
			
			<Declaration>- (PPHReaderError)activateReader:(PPHCardReaderBasicInformation *)readerOrNil</Declaration>
			<Parameters>
				<Parameter>
					<Name>readerOrNil</Name>
					<Abstract type="html">The reader to activate or nil for the default/only reader.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/activateReader:</Anchor>
            <NodeRef refid="7"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHCardReaderManager/deactivateReader:</TokenIdentifier>
			<Abstract type="html">Disconnect or deactivate the reader given. In the case of the audior readers this may turn off the battery
or stop feeding power via the audio jack. In the case of bluetooth or feature port readers this may
disconnect the reader.</Abstract>
			<DeclaredIn>PPHCardReaderManager.h</DeclaredIn>
			
			<Declaration>- (void)deactivateReader:(PPHCardReaderBasicInformation *)readerOrNil</Declaration>
			<Parameters>
				<Parameter>
					<Name>readerOrNil</Name>
					<Abstract type="html">The reader to deactivate or nil for the default/only reader.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/deactivateReader:</Anchor>
            <NodeRef refid="7"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHCardReaderManager/endTransaction</TokenIdentifier>
			<Abstract type="html">Once a transaction is complete, either via our processing services or out-of-band processing
such as cash or non-PayPal mechanisms, call endTransaction to shut down the reader. Since
some readers are battery powered, you should call this as soon as reasonable. The SDK will
automatically take care of this when your app is suspended or interrupted.</Abstract>
			<DeclaredIn>PPHCardReaderManager.h</DeclaredIn>
			
			<Declaration>- (void)endTransaction</Declaration>
			
			
			<Anchor>//api/name/endTransaction</Anchor>
            <NodeRef refid="7"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHCardReaderManager/setPreferenceOrder:</TokenIdentifier>
			<Abstract type="html">For accessory based readers, there is the possibility that multiple capable devices may
be connected to the phone at the same time. In this case, specifying a preference
order can be useful to manage multiple devices with multiple phones. Generally,
you&apos;re probably better off using the inherent iOS pairing screens to manage this,
but to each their own. In addition, if you have custom bluetooth or dock port readers
that we support, you can pass the custom protocol string in this list and we&apos;ll look for
that. IMPORTANT: You still need to add the protocol to your application&apos;s plist
(under supported accessories) in order for this to work.</Abstract>
			<DeclaredIn>PPHCardReaderManager.h</DeclaredIn>
			
			<Declaration>- (void)setPreferenceOrder:(NSArray *)arrayOfCardReaderBasicInfo</Declaration>
			<Parameters>
				<Parameter>
					<Name>arrayOfCardReaderBasicInfo</Name>
					<Abstract type="html">The array argument should be a set of card reader
information with as much information as relevant
filled out (for example name is not required when devices of that type have no name)</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setPreferenceOrder:</Anchor>
            <NodeRef refid="7"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHCardReaderManager/availableDevices</TokenIdentifier>
			<Abstract type="html">An array of known available devices. For example with bluetooth devices this will include
paired devices that are currently within range/connectable.</Abstract>
			<DeclaredIn>PPHCardReaderManager.h</DeclaredIn>
			
			<Declaration>- (NSArray *)availableDevices</Declaration>
			
			<ReturnValue><Abstract type="html">NSArray(PPHCardReaderBasicInformation</Abstract></ReturnValue>
			<Anchor>//api/name/availableDevices</Anchor>
            <NodeRef refid="7"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHCardReaderManager/beginUpgrade:</TokenIdentifier>
			<Abstract type="html">In the case of readers requiring further setup, call this method with the PPHCardReaderBasicInformation
for the target reader.</Abstract>
			<DeclaredIn>PPHCardReaderManager.h</DeclaredIn>
			
			<Declaration>- (void)beginUpgrade:(PPHCardReaderBasicInformation *)reader</Declaration>
			<Parameters>
				<Parameter>
					<Name>reader</Name>
					<Abstract type="html">the reader to upgrade</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/beginUpgrade:</Anchor>
            <NodeRef refid="7"/>
		</Token>
		
        
	</File>
</Tokens>