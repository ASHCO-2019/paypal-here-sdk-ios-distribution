/**
 * PPRetailPaymentDevice.h
 *
 * DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED AND SHOULD NOT BE CHECKED IN.
 * Generated from: node_modules/retail-payment-device/lib/PaymentDevice.js
 *
 * 
 */

#import "PayPalRetailSDKTypeDefs.h"
#import "PPRetailObject.h"

@class PPRetailSDK;
@class PPRetailError;
@class PPRetailAccountSummary;
@class PPRetailAccountSummarySection;
@class PPRetailInvoiceAddress;
@class PPRetailInvoiceAttachment;
@class PPRetailInvoiceBillingInfo;
@class PPRetailInvoiceCCInfo;
@class PPRetailCountries;
@class PPRetailCountry;
@class PPRetailInvoice;
@class PPRetailInvoiceActions;
@class PPRetailInvoiceListRequest;
@class PPRetailInvoiceListResponse;
@class PPRetailInvoiceTemplatesResponse;
@class PPRetailInvoicingService;
@class PPRetailInvoiceItem;
@class PPRetailInvoiceMerchantInfo;
@class PPRetailInvoiceNotification;
@class PPRetailInvoicePayment;
@class PPRetailInvoicePaymentInfo;
@class PPRetailInvoicePaymentTerm;
@class PPRetailInvoiceRefund;
@class PPRetailInvoiceRefundInfo;
@class PPRetailInvoiceSearchRequest;
@class PPRetailInvoiceShippingInfo;
@class PPRetailInvoiceTemplate;
@class PPRetailMerchant;
@class PPRetailTransactionContext;
@class PPRetailSignatureReceiver;
@class PPRetailCard;
@class PPRetailBatteryInfo;
@class PPRetailMagneticCard;
@class PPRetailPaymentDevice;
@class PPRetailEmvDevice;
@class PPRetailDeviceUpdate;
@class PPRetailDeviceOperationResultHandler;
@class PPRetailVirtualPaymentDevice;
@class PPRetailPayer;
@class PPRetailTransactionRecord;

/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/**
 * A payment device represents the abstract concept of something that can read payment information from a customer.
 * This includes card swipe readers, EMV readers, barcode scanners, biometric devices we don't have yet, and DNA
 * sequencers. Ok, not so much that last bit.
 */
@interface PPRetailPaymentDevice : PPRetailObject

    /**
    * A unique identifier for the device
    */
    @property (nonatomic,strong) NSString* id;
    /**
    * A friendly name for the device
    */
    @property (nonatomic,strong) NSString* name;
    /**
    * The manufacturer of the card reader
    */
    @property (nonatomic,strong) NSString* manufacturer;
    /**
    * The serial number of the device, if available
    */
    @property (nonatomic,strong) NSString* serialNumber;
    /**
    * Status of the device battery @readonly
    */
    @property (nonatomic,strong,readonly) PPRetailBatteryInfo* batteryInfo;
    /**
    * The payment form factors this device can support @readonly
    */
    @property (nonatomic,strong,readonly) NSArray* formFactors;
    /**
    * Any pending software update for this device, or null if the device is current
    */
    @property (nonatomic,strong) PPRetailDeviceUpdate* pendingUpdate;

    -(instancetype)initWithUniqueId:(NSString*)uniqueId;
    - (instancetype)init NS_UNAVAILABLE;
    + (instancetype)new NS_UNAVAILABLE;




    /**
     * Return true if this device is connected
     */
    -(BOOL)isConnected;




    /**
     * Add a listener for the connected event
     * @returns PPRetailConnectedSignal an object that can be used to remove the listener when
     * you're done with it.
     */
    -(PPRetailConnectedSignal)addConnectedListener:(PPRetailConnectedEvent)listener;

    /**
     * Remove a listener for the connected event given the signal object that was returned from addConnectedListener
     */
    -(void)removeConnectedListener:(PPRetailConnectedSignal)listenerToken;


    /**
     * Add a listener for the disconnected event
     * @returns PPRetailDisconnectedSignal an object that can be used to remove the listener when
     * you're done with it.
     */
    -(PPRetailDisconnectedSignal)addDisconnectedListener:(PPRetailDisconnectedEvent)listener;

    /**
     * Remove a listener for the disconnected event given the signal object that was returned from addDisconnectedListener
     */
    -(void)removeDisconnectedListener:(PPRetailDisconnectedSignal)listenerToken;


    /**
     * Add a listener for the updateRequired event
     * @returns PPRetailUpdateRequiredSignal an object that can be used to remove the listener when
     * you're done with it.
     */
    -(PPRetailUpdateRequiredSignal)addUpdateRequiredListener:(PPRetailUpdateRequiredEvent)listener;

    /**
     * Remove a listener for the updateRequired event given the signal object that was returned from addUpdateRequiredListener
     */
    -(void)removeUpdateRequiredListener:(PPRetailUpdateRequiredSignal)listenerToken;


    /**
     * Add a listener for the cardRemoved event
     * @returns PPRetailCardRemovedSignal an object that can be used to remove the listener when
     * you're done with it.
     */
    -(PPRetailCardRemovedSignal)addCardRemovedListener:(PPRetailCardRemovedEvent)listener;

    /**
     * Remove a listener for the cardRemoved event given the signal object that was returned from addCardRemovedListener
     */
    -(void)removeCardRemovedListener:(PPRetailCardRemovedSignal)listenerToken;


    /**
     * Add a listener for the cardPresented event
     * @returns PPRetailCardPresentedSignal an object that can be used to remove the listener when
     * you're done with it.
     */
    -(PPRetailCardPresentedSignal)addCardPresentedListener:(PPRetailCardPresentedEvent)listener;

    /**
     * Remove a listener for the cardPresented event given the signal object that was returned from addCardPresentedListener
     */
    -(void)removeCardPresentedListener:(PPRetailCardPresentedSignal)listenerToken;


@end
